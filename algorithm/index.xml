<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithms on Dinwy&#39;s blog</title>
    <link>https://dinwy.github.io/algorithm/</link>
    <description>Recent content in Algorithms on Dinwy&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 22 Apr 2020 04:26:14 +0900</lastBuildDate>
    
	<atom:link href="https://dinwy.github.io/algorithm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>LeetCode/202. HappyNumber</title>
      <link>https://dinwy.github.io/algorithm/2020/HappyNumber/</link>
      <pubDate>Wed, 22 Apr 2020 04:26:14 +0900</pubDate>
      
      <guid>https://dinwy.github.io/algorithm/2020/HappyNumber/</guid>
      <description>Link  https://leetcode.com/problems/happy-number  Summary Simple math quiz.
Solutions My Solution Didn&amp;rsquo;t really care about how to solve this problem. Directly translate the description to the code.
public bool IsHappy(int n) { var str = n.ToString(); var dict = new HashSet&amp;lt;int&amp;gt;() { n }; while (str != &amp;quot;1&amp;quot;) { var temp = 0; foreach (char c in str) { temp += (int)Math.Pow((int)char.GetNumericValue(c), 2); } if (dict.Contains(temp)) return false; dict.Add(temp); str = temp.</description>
    </item>
    
    <item>
      <title>LeetCode/198. HouseRobber</title>
      <link>https://dinwy.github.io/algorithm/2020/HouseRobber/</link>
      <pubDate>Wed, 22 Apr 2020 04:00:33 +0900</pubDate>
      
      <guid>https://dinwy.github.io/algorithm/2020/HouseRobber/</guid>
      <description>Link  https://leetcode.com/problems/house-robber  Summary Dp problem. I&amp;rsquo;ve struggle to fine a proper solution.
Solutions My Solution This is similar to maximumSubArray problem, however skipping one made me confused. I was able to find a solution directly with recursion but reached timeout.
// Time out, a slow solution. public int Rob(int[] nums) { if (nums.Length == 0) return 0; if (nums.Length == 1) return nums[0]; return Math.Max(Recursion(nums, 0), Recursion(nums, 1)); } private int Recursion(int[] nums, int idx) { if (idx &amp;gt;= nums.</description>
    </item>
    
    <item>
      <title>LeetCode/190. ReverseBits</title>
      <link>https://dinwy.github.io/algorithm/2020/ReverseBits/</link>
      <pubDate>Thu, 16 Apr 2020 00:58:46 +0900</pubDate>
      
      <guid>https://dinwy.github.io/algorithm/2020/ReverseBits/</guid>
      <description>Link  https://leetcode.com/problems/reverse-bits/  Summary Asking that do you know bit operations.
Solutions My Solution Contrast to what the question was really asking, I&amp;rsquo;m not familiar with bits. So I brought arithmetic solution to solve this problem.
public uint reverseBits(uint n) { uint result = 0; var k = 32; while (k &amp;gt;= 0) { var reminder = (n % 2); n /= 2; k--; if (reminder == 0) continue; result += (uint)Math.</description>
    </item>
    
    <item>
      <title>LeetCode/189. RotateArray</title>
      <link>https://dinwy.github.io/algorithm/2020/RotateArray/</link>
      <pubDate>Thu, 16 Apr 2020 00:48:46 +0900</pubDate>
      
      <guid>https://dinwy.github.io/algorithm/2020/RotateArray/</guid>
      <description>Link  https://leetcode.com/problems/rotate-array/  Summary Another rotate array problem. I&amp;rsquo;ve wasted my time a lot (more than 4 hours) to optimize this.
Solutions My Solution I was not able to find a O(1) space solution.
public class Solution { public void Rotate(int[] nums, int k) { var temp = new int[nums.Length]; Array.Copy(nums,temp, nums.Length); for (int i = 0; i &amp;lt; nums.Length; i++) { nums[(i + k) % nums.Length] = temp[i]; } } }  Best Solution Didn&amp;rsquo;t really know about reverse the array with certain length will solve this problem.</description>
    </item>
    
    <item>
      <title>LeetCode/171. ExcelSheetColumnNumber</title>
      <link>https://dinwy.github.io/algorithm/2020/ExcelSheetColumnNumber/</link>
      <pubDate>Wed, 15 Apr 2020 00:00:49 +0900</pubDate>
      
      <guid>https://dinwy.github.io/algorithm/2020/ExcelSheetColumnNumber/</guid>
      <description>Link  https://leetcode.com/problems/excel-sheet-column-number/  Summary This is the next series of ExcelSheetColumnTitle. Doesn&amp;rsquo;t took a long time. But I was thinking in a wrong way, doesn&amp;rsquo;t need to use Maht.Pow. Always good to think a simple &amp;amp; concise solution in arithmetic.
Solutions My Solution public int TitleToNumber(string s) { var output = 0; var pow = 0; while (!String.IsNullOrEmpty(s)) { var lastChar = s[s.Length - 1]; output += ((lastChar + 1) - 65) * (int)Math.</description>
    </item>
    
    <item>
      <title>LeetCode/169. MajorityElement</title>
      <link>https://dinwy.github.io/algorithm/2020/MajorityElement/</link>
      <pubDate>Tue, 14 Apr 2020 23:10:57 +0900</pubDate>
      
      <guid>https://dinwy.github.io/algorithm/2020/MajorityElement/</guid>
      <description>Link  https://leetcode.com/problems/majority-element/  Summary The solution wasn&amp;rsquo;t hard to find. But the best solution was a known algorithm, http://www.cs.utexas.edu/~moore/best-ideas/mjrty/example.html
Solutions My Solution public int MajorityElement(int[] nums) { var target = nums.Length / 2 + 1; // num, count var dict = new Dictionary&amp;lt;int, int&amp;gt;(); for (int i = 0; i &amp;lt; nums.Length; i++) { if (dict.ContainsKey(nums[i])) { dict[nums[i]]++; if (dict[nums[i]] == target) return nums[i]; } else dict[nums[i]] = 1; } return dict.</description>
    </item>
    
    <item>
      <title>LeetCode/168. ExcelSheetColumnTitle</title>
      <link>https://dinwy.github.io/algorithm/2020/ExcelSheetColumnTitle/</link>
      <pubDate>Tue, 14 Apr 2020 22:05:39 +0900</pubDate>
      
      <guid>https://dinwy.github.io/algorithm/2020/ExcelSheetColumnTitle/</guid>
      <description>Link  https://leetcode.com/problems/excel-sheet-column-title/  Summary It was a simple math but I was a bit struggling when solving this. Need to think properly.
Solutions My Solution public string ConvertToTitle(int n) { var res = &amp;quot;&amp;quot;; while (n != 0) { var reminder = (n - 1) % 26; res = (char)(reminder + 65) + res; n = (n - 1) / 26; } return res; }  Best Solution // Best solution public string BestConvertToTitle(int n) { return n == 0 ?</description>
    </item>
    
    <item>
      <title>LeetCode/167. TwoSums2</title>
      <link>https://dinwy.github.io/algorithm/2020/TwoSums2/</link>
      <pubDate>Tue, 14 Apr 2020 20:41:38 +0900</pubDate>
      
      <guid>https://dinwy.github.io/algorithm/2020/TwoSums2/</guid>
      <description>Link  https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/  Summary Finding solution with Dictionary was simple. However in the best answer, using two pointer was which I didn&amp;rsquo;t think about before.
Solutions My Solution public int[] TwoSum(int[] numbers, int target) { // value, index var pair = new Dictionary&amp;lt;int, int&amp;gt;(); var res = new int[2] { 0, 0 }; for (int i = 0; i &amp;lt; numbers.Length; i++) { if (pair.ContainsKey(target - numbers[i])) { res[0] = pair[target - numbers[i]] + 1; res[1] = i + 1; return res; } pair.</description>
    </item>
    
    <item>
      <title>LeetCode/161. IntersectionOfTwoLinkedLists</title>
      <link>https://dinwy.github.io/algorithm/2020/IntersectionOfTwoLinkedLists/</link>
      <pubDate>Tue, 14 Apr 2020 20:39:36 +0900</pubDate>
      
      <guid>https://dinwy.github.io/algorithm/2020/IntersectionOfTwoLinkedLists/</guid>
      <description>Link  https://leetcode.com/problems/intersection-of-two-linked-lists/  Summary It wasn&amp;rsquo;t really hard to solve it with Dictionary, however there is a another way to solve this problem.
Solutions My Solution public ListNode GetIntersectionNode(ListNode headA, ListNode headB) { var dict = new HashSet&amp;lt;ListNode&amp;gt;(); while (headA != null || headB != null) { if (headA != null) { if (dict.Contains(headA)) return headA; else dict.Add(headA); headA = headA.next; } if (headB != null) { if (dict.</description>
    </item>
    
    <item>
      <title>LeetCode/155. MinStack</title>
      <link>https://dinwy.github.io/algorithm/2020/MinStack/</link>
      <pubDate>Tue, 14 Apr 2020 20:33:26 +0900</pubDate>
      
      <guid>https://dinwy.github.io/algorithm/2020/MinStack/</guid>
      <description>Link  https://leetcode.com/problems/min-stack/  Summary Find a min stack. I almost solved at 8 mins but stuck there more for 20 mins. I was stuck there because of I was not checking Peek() when minStackCount is more than 0.
Solutions My Solution So, I&amp;rsquo;ve stuck there for 20 mins finding simple if check. The reason was that I was brutal force and fix the error without thinking what is actually wrong.</description>
    </item>
    
    <item>
      <title>LeetCode/141. LinkedListCycle</title>
      <link>https://dinwy.github.io/algorithm/2020/LinkedListCycle/</link>
      <pubDate>Fri, 10 Apr 2020 00:27:08 +0900</pubDate>
      
      <guid>https://dinwy.github.io/algorithm/2020/LinkedListCycle/</guid>
      <description>Link  https://leetcode.com/problems/linked-list-cycle  Summary I was very confused about input parameters in description. The question suggested two inputs but I&amp;rsquo;ve got only one. After reading thread about the same question I have, I only have to test whether given Linked list is cycle or not.
Solutions My Solution My solution uses dictionary which I&amp;rsquo;ve already seen that node or not.
public bool HasCycle(ListNode head) { var haveSeen = new Dictionary&amp;lt;ListNode, bool&amp;gt;(); var p = head; while (p !</description>
    </item>
    
    <item>
      <title>LeetCode/136. SingleNumber</title>
      <link>https://dinwy.github.io/algorithm/2020/SingleNumber/</link>
      <pubDate>Fri, 10 Apr 2020 00:21:46 +0900</pubDate>
      
      <guid>https://dinwy.github.io/algorithm/2020/SingleNumber/</guid>
      <description>Link  https://leetcode.com/problems/single-number/  Summary Easy question, asking do you know data type dictionary.
Solutions My Solution public int Solution(int[] nums) { var dict = new Dictionary&amp;lt;int, int&amp;gt;(); for (int i = 0; i &amp;lt; nums.Length; i++) { if (!dict.ContainsKey(nums[i])) dict[nums[i]] = 1; else dict[nums[i]]++; } return dict.Where(x =&amp;gt; x.Value == 1).FirstOrDefault().Key; }  Best Solution Even though solving this question with dictionary is a one way, there is another way to solve this problem.</description>
    </item>
    
    <item>
      <title>LeetCode/122. BestTimeToBuyAndSellStock2</title>
      <link>https://dinwy.github.io/algorithm/2020/BestTimeToBuyAndSellStock2/</link>
      <pubDate>Fri, 10 Apr 2020 00:18:54 +0900</pubDate>
      
      <guid>https://dinwy.github.io/algorithm/2020/BestTimeToBuyAndSellStock2/</guid>
      <description>Link  https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/  Summary Since I&amp;rsquo;ve already solved the first one, solving second one was easy.
Solutions My Solution Despite I&amp;rsquo;ve already know the last best solution, I&amp;rsquo;ve tried with my way which is more intuitive to me.
public int MaxProfit(int[] prices) { var previousVal = int.MaxValue; var minVal = int.MaxValue; var maxVal = int.MinValue; var result = 0; for (int i = 0; i &amp;lt; prices.Length; i++) { if (prices[i] &amp;lt; previousVal) { minVal = Math.</description>
    </item>
    
    <item>
      <title>LeetCode/121. BestTimeToBuyAndSellStock</title>
      <link>https://dinwy.github.io/algorithm/2020/BestTimeToBuyAndSellStock/</link>
      <pubDate>Wed, 08 Apr 2020 00:26:28 +0900</pubDate>
      
      <guid>https://dinwy.github.io/algorithm/2020/BestTimeToBuyAndSellStock/</guid>
      <description>Link  https://leetcode.com/problems/best-time-to-buy-and-sell-stock  Summary It was interesting to think how to solve this. First I found a very slow O(n²) then found a better solution which is O(n).
Solutions My Solution The slow solution was brutal forcing the problem. Find a max value each time you iterating it.
// Slow solution public int MaxProfit_Slow(int[] prices) { var res = 0; for (int i = 0; i &amp;lt; prices.Length; i++) { var max = prices.</description>
    </item>
    
    <item>
      <title>LeetCode/119. PascalsTriangle2</title>
      <link>https://dinwy.github.io/algorithm/2020/PascalsTriangle2/</link>
      <pubDate>Wed, 08 Apr 2020 00:23:04 +0900</pubDate>
      
      <guid>https://dinwy.github.io/algorithm/2020/PascalsTriangle2/</guid>
      <description>Link  https://leetcode.com/problems/pascals-triangle-ii  Summary The extension of the pascal&amp;rsquo;s triangle algorithm. Wasn&amp;rsquo;t really hard to solve this problem.
Solutions My Solution public IList&amp;lt;int&amp;gt; GetRow(int rowIndex) { if (rowIndex &amp;lt; 0) return new int[0]; var res = new int[rowIndex + 1]; for (int row = 0; row &amp;lt;= rowIndex; row++) { var t = new int[row + 1]; t[0] = 1; t[t.Length - 1] = 1; for (int i = 1; i &amp;lt; t.</description>
    </item>
    
    <item>
      <title>LeetCode/118. PascalsTriangle</title>
      <link>https://dinwy.github.io/algorithm/2020/PascalsTriangle/</link>
      <pubDate>Wed, 01 Apr 2020 20:13:09 +0900</pubDate>
      
      <guid>https://dinwy.github.io/algorithm/2020/PascalsTriangle/</guid>
      <description>Link  https://leetcode.com/problems/pascals-triangle/  Summary I was trying to make a optimal formula of this problem when I was solving. However algorithm questions are often not asking optimal solution but asking the solution itself. Simply translate the description into a code will solve this problem.
Solutions My Solution public class PascalsTriangle { public IList&amp;lt;IList&amp;lt;int&amp;gt;&amp;gt; Generate(int numRows) { var output = new int[numRows][]; // Set pointer var p0 = 0; for (int level = 0; level &amp;lt; numRows; level++) { var l = new int[level + 1]; output[level] = l; l[0] = 1; l[l.</description>
    </item>
    
    <item>
      <title>LeetCode/112. PathSum</title>
      <link>https://dinwy.github.io/algorithm/2020/PathSum/</link>
      <pubDate>Mon, 30 Mar 2020 22:13:43 +0900</pubDate>
      
      <guid>https://dinwy.github.io/algorithm/2020/PathSum/</guid>
      <description>Link  https://leetcode.com/problems/path-sum  Summary When I was solving this problem, I was missing two things. 
 Not caring about negative numbers. Not carefully reding a description.  The description says that adding up all the values along the path. However I was thinking that Adding up until we find a value. This kind of process of thinking should be prevented, the assumption and misunderstanding.
Solutions public bool HasPathSum(TreeNode root, int sum) { if (root == null) return false; if (sum - root.</description>
    </item>
    
    <item>
      <title>LeetCode/111. MinimumDepthOfBinaryTree</title>
      <link>https://dinwy.github.io/algorithm/2020/MinimumDepthOfBinaryTree/</link>
      <pubDate>Mon, 30 Mar 2020 21:51:13 +0900</pubDate>
      
      <guid>https://dinwy.github.io/algorithm/2020/MinimumDepthOfBinaryTree/</guid>
      <description>Link  https://leetcode.com/problems/minimum-depth-of-binary-tree/  Summary Finding minimum depth of binary tree.
Solutions Best solution gives me a better idea. Don&amp;rsquo;t need to use targetNode pointer, because when one of those are null I just have to add them.(Cuz it will return 0);
My Solution public int MinDepth(TreeNode root) { if (root == null) return 0; if (root.left != null &amp;amp;&amp;amp; root.right != null) { return Math.Min(MinDepth(root.left), MinDepth(root.right)) + 1; } else { var targetNode = root.</description>
    </item>
    
    <item>
      <title>LeetCode/110. BalancedBinaryTree</title>
      <link>https://dinwy.github.io/algorithm/2020/BalancedBinaryTree/</link>
      <pubDate>Fri, 27 Mar 2020 00:11:58 +0900</pubDate>
      
      <guid>https://dinwy.github.io/algorithm/2020/BalancedBinaryTree/</guid>
      <description>Link  https://leetcode.com/problems/balanced-binary-tree/  Summary I was super confused about this problem and took a day to solve it.  Really need to think about how to go to all nodes with DFS.
Solutions My Solution I finally reached the solution with DFS. However I used try catch witch doesn&amp;rsquo;t really needed.
public bool IsBalanced(TreeNode root) { try { Height(root); return true; } catch { return false; } } public int Height(TreeNode node) { if (node == null) { return 0; } else { var left = Height(node.</description>
    </item>
    
    <item>
      <title>LeetCode/108. ConvertSortedArrayToBST</title>
      <link>https://dinwy.github.io/algorithm/2020/ConvertSortedArrayToBST/</link>
      <pubDate>Sun, 22 Mar 2020 19:50:49 +0900</pubDate>
      
      <guid>https://dinwy.github.io/algorithm/2020/ConvertSortedArrayToBST/</guid>
      <description>Link  https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/  Summary I was taking break way more than it should be. Also I totally misunderstood this problem.  I really should read document carefully.
Solutions My Solution The below is my first solution without caring many things.
public class ConvertSortedArrayToBST { public TreeNode SortedArrayToBST(int[] nums) { if (nums.Length == 0) return null; var output = new TreeNode(0); Recursion(ref output.left, nums); return output.left; } private void Recursion(ref TreeNode output, int[] nums) { if (nums.</description>
    </item>
    
    <item>
      <title>LeetCode/104. MaximumDepthOfBinaryTree</title>
      <link>https://dinwy.github.io/algorithm/2020/MaximumDepthOfBinary/</link>
      <pubDate>Tue, 17 Mar 2020 21:24:12 +0900</pubDate>
      
      <guid>https://dinwy.github.io/algorithm/2020/MaximumDepthOfBinary/</guid>
      <description>Link  https://leetcode.com/problems/maximum-depth-of-binary-tree  Summary Find a maximum depth of Binary Tree.
Solutions My Solution I was thinking about solving this problem with BFS but realized DFS is much easy to solve this problem after making some mistakes.
public class MaximumDepthOfBinaryTree { public int MaxDepth(TreeNode root) { var sum = 0; return Recursion(root, sum); } public int Recursion(TreeNode root, int sum) { if (root == null) return sum; sum++; return Math.</description>
    </item>
    
    <item>
      <title>LeetCode/101. SymmetricTree</title>
      <link>https://dinwy.github.io/algorithm/2020/SymmetricTree/</link>
      <pubDate>Tue, 17 Mar 2020 20:31:19 +0900</pubDate>
      
      <guid>https://dinwy.github.io/algorithm/2020/SymmetricTree/</guid>
      <description>Link  https://leetcode.com/problems/symmetric-tree  Summary Figure out given TreeNode is symmetric or not. I was thinking for a while and able to get an answer.
Solutions My Solution I feel like now I have some mindset that I can solve programming problem with using my brain. Using BFS to find an answer.
public class SymmetricTree { public bool IsSymmetric(TreeNode root) { if (root == null) return true; var result = true; var queue = new Queue&amp;lt;TreeNode&amp;gt;(); queue.</description>
    </item>
    
    <item>
      <title>LeetCode/100. SameTree</title>
      <link>https://dinwy.github.io/algorithm/2020/SameTree/</link>
      <pubDate>Tue, 17 Mar 2020 18:52:36 +0900</pubDate>
      
      <guid>https://dinwy.github.io/algorithm/2020/SameTree/</guid>
      <description>Link  https://leetcode.com/problems/same-tree  Summary Find the tree is the same.
Solutions My Solution Solved directly when I saw this problem. Also my solution is one of the best answers. This question not asking about optimization.  Basically this is the same question as 70.ClimbingStairs.
public bool IsSameTree(TreeNode p, TreeNode q) { if (p == null &amp;amp;&amp;amp; q != null) return false; if (p != null &amp;amp;&amp;amp; q == null) return false; if (p == null &amp;amp;&amp;amp; q == null) return true; if (p.</description>
    </item>
    
    <item>
      <title>LeetCode/83. RemoveDuplicatesFromSortedList</title>
      <link>https://dinwy.github.io/algorithm/2020/RemoveDuplicatesFromSortedList/</link>
      <pubDate>Mon, 16 Mar 2020 23:29:15 +0900</pubDate>
      
      <guid>https://dinwy.github.io/algorithm/2020/RemoveDuplicatesFromSortedList/</guid>
      <description>Link  https://leetcode.com/problems/remove-duplicates-from-sorted-list  Summary Solutions My Solution When I was solving this problem I made mistakes at start.
 I didn&amp;rsquo;t think about it is SortedLists. Which make me use HashSet.  Also I was confused using pointer properly. Was thinking too much ended up using 3 pointers.
public ListNode Solution(ListNode head) { var output = new ListNode(0); var resultNode = output; var outputTail = head; var dict = new HashSet&amp;lt;int&amp;gt;(); while (outputTail !</description>
    </item>
    
    <item>
      <title>LeetCode/70. ClimbingStairs</title>
      <link>https://dinwy.github.io/algorithm/2020/ClimbingStairs/</link>
      <pubDate>Mon, 16 Mar 2020 20:19:55 +0900</pubDate>
      
      <guid>https://dinwy.github.io/algorithm/2020/ClimbingStairs/</guid>
      <description>Link  https://leetcode.com/problems/climbing-stairs/  Solutions My Solution I used Dynamic Programming to solve this problem. Quite easy to solve to me.
public int Solution(int n) { var arr = new int[n + 1]; return Recursion(n, arr); } private int Recursion(int n, int[] arr) { if (n &amp;lt; 0) return 0; if (n == 0) return 1; if (arr[n] != 0) return arr[n]; arr[n] = Recursion(n - 1, arr) + Recursion(n - 2, arr); return arr[n]; }  Best Solution However the best answer says that this is a Fibonacci problem.</description>
    </item>
    
    <item>
      <title>LeetCode/67. AddBinary</title>
      <link>https://dinwy.github.io/algorithm/2020/AddBinary/</link>
      <pubDate>Mon, 16 Mar 2020 19:12:48 +0900</pubDate>
      
      <guid>https://dinwy.github.io/algorithm/2020/AddBinary/</guid>
      <description>Link https://leetcode.com/problems/add-binary/
Summary Given two binary strings and return their sum. 
Solutions My Solution In my solution, the idea using two pointer was correct. However checking for the short and long string was a bit too much.
public string Solution(string a, string b) { var shorterString = &amp;quot;&amp;quot;; var longerString = &amp;quot;&amp;quot;; int pointerS, pointerL = 0; var output = &amp;quot;&amp;quot;; if (a.Length &amp;gt; b.Length) { shorterString = b; pointerS = b.</description>
    </item>
    
    <item>
      <title>LeetCode/58. LengthOfLastWord &amp; LeetCode/66. PlusOne</title>
      <link>https://dinwy.github.io/algorithm/2020/LengthOfLastWordAndPlusOne/</link>
      <pubDate>Fri, 13 Mar 2020 20:16:45 +0900</pubDate>
      
      <guid>https://dinwy.github.io/algorithm/2020/LengthOfLastWordAndPlusOne/</guid>
      <description>Link  https://leetcode.com/problems/length-of-last-word https://leetcode.com/problems/plus-one  Summary  Length Of Last Word is not even a algorithm question.  PlusOne was really easy but I was making a simple mistake which should be handled.   Solutions My Solution I&amp;rsquo;ll skip explaining #58.
public int Solution(string s) { var res = 0; for (int i = s.Length - 1; i &amp;gt;= 0; i--) { if (Char.IsWhiteSpace(s[i])) { if (res != 0) return res; res = 0; continue; } res++; } return res; }   PlusOne was interesting because I was missing two thing.</description>
    </item>
    
    <item>
      <title>LeetCode/53. MaximumSubarray</title>
      <link>https://dinwy.github.io/algorithm/2020/MaximumSubarray/</link>
      <pubDate>Thu, 12 Mar 2020 22:07:35 +0900</pubDate>
      
      <guid>https://dinwy.github.io/algorithm/2020/MaximumSubarray/</guid>
      <description>Link  https://leetcode.com/problems/maximum-subarray  Summary Getting maximum sub array. Writing in hand make this much easier to solve. took 13 mins to solve with O(n) complexity. However the problem asked me solve this in a better time complexity.
Solutions My Solution After checking the solution, my solution was actual very close to the best solution. I could think about DP solution by using previous values.
public int SolutionOn(int[] nums) { var subsetSum = 0; var max = nums[0]; for (int i = 0; i &amp;lt; nums.</description>
    </item>
    
    <item>
      <title>LeetCode/35. SearchInsertPosition</title>
      <link>https://dinwy.github.io/algorithm/2020/SearchInsertPosition/</link>
      <pubDate>Thu, 12 Mar 2020 20:58:48 +0900</pubDate>
      
      <guid>https://dinwy.github.io/algorithm/2020/SearchInsertPosition/</guid>
      <description>Link https://leetcode.com/problems/search-insert-position/
Summary The problem was easy. However it was asking how to solve the problem with O(logn) complexity rather than O(n)
Solutions My Solution I&amp;rsquo;ve solved the problem when I saw the problem however not thinking about the O(logn) solution.
public int SearchInsertOn(int[] nums, int target) { int idx = 0; for (int i = 0; i &amp;lt; nums.Length; i++) { if (nums[i] &amp;lt; target) { idx++; continue; } else { break; } } return idx; }  Best Solution The best solution is using binary search method Keep checking low and high and split into 2 section.</description>
    </item>
    
    <item>
      <title>LeetCode/21. MergeTwoSortedLists</title>
      <link>https://dinwy.github.io/algorithm/2020/MergeTwoSortedLists/</link>
      <pubDate>Thu, 12 Mar 2020 20:03:48 +0900</pubDate>
      
      <guid>https://dinwy.github.io/algorithm/2020/MergeTwoSortedLists/</guid>
      <description>Link https://leetcode.com/problems/merge-two-sorted-lists/
Summary This was asking same question as AddTwoNumbers. Can properly reference next in LinkedArray.  Still quite slow, but solving much faster than before.
Solutions My Solution I was a bit confused which order comes first outputTail.next or outputTail. But it is obvious. The proper steps will be,
 Assign a new value to the outputTail.next via new ListNode(x). Change the pointer(ref) of outputTail to outputTail.next which is a new value has been assigned.</description>
    </item>
    
    <item>
      <title>LeetCode/20. Valid Parentheses</title>
      <link>https://dinwy.github.io/algorithm/2020/ValidParentheses/</link>
      <pubDate>Thu, 12 Mar 2020 00:15:11 +0900</pubDate>
      
      <guid>https://dinwy.github.io/algorithm/2020/ValidParentheses/</guid>
      <description>Preface I think I&amp;rsquo;ve already solved this problem on CodeWars. But it is a good exercise solve this problem again.
Link https://leetcode.com/problems/valid-parentheses
Summary This is asking two things, can you use Stack and Dictionary. When I was solving this first time, I was more thinking about using three HashSet. However after thinking and checking the best solution, I only need a single Dictionary &amp;amp; temporary Stack to validate.
Solution My First Solution public bool IsValidFirstSolution(string s) { var stack = new Stack&amp;lt;string&amp;gt;(s.</description>
    </item>
    
    <item>
      <title>LeetCode/7. ReverseInteger &amp; LeetCode/9. PalindromeNumber</title>
      <link>https://dinwy.github.io/algorithm/2020/ReverseIntegerAndPalindromeNumber/</link>
      <pubDate>Wed, 11 Mar 2020 19:24:54 +0900</pubDate>
      
      <guid>https://dinwy.github.io/algorithm/2020/ReverseIntegerAndPalindromeNumber/</guid>
      <description>Preface I&amp;rsquo;m trying to take a Easy difficulty ones to warm up my coding practice.
Link https://leetcode.com/problems/reverse-integer/ https://leetcode.com/problems/palindrome-number/
Summary Solving these two problem wasn&amp;rsquo;t hard. Both are asking the same thing. Can you pop number from integer rather than using string  However re-learning that pop = x % 10 &amp;amp; x /= 10
Solution 7.ReverseInteger public class ReverseInteger { public int Solution(int x) { var str = x.ToString(); var leng = x &amp;lt; 0 ?</description>
    </item>
    
    <item>
      <title>LeetCode/3. Add Two Numbers</title>
      <link>https://dinwy.github.io/algorithm/2020/AddTwoNumbers/</link>
      <pubDate>Tue, 10 Mar 2020 21:30:57 +0900</pubDate>
      
      <guid>https://dinwy.github.io/algorithm/2020/AddTwoNumbers/</guid>
      <description>Preface I&amp;rsquo;ve solved this problem a year ago with a weird way. Today I&amp;rsquo;ve reviewed this problem.
Link  https://leetcode.com/problems/add-two-numbers  Summary Reviewing this problem took more than an hour, which made me disappointed and surprise me.  I was very confused assigning outputTail. Same as
{ l1 = l1.next; l2 = l2.next; outputTail = outputTail.next; }  By assigning nextNode to the currentNode which will make loop end at some point.</description>
    </item>
    
    <item>
      <title>Udemy/11Essential: Rotating 2D array 90 degree</title>
      <link>https://dinwy.github.io/algorithm/2020/Rotating2DArray/</link>
      <pubDate>Mon, 17 Feb 2020 22:47:51 +0900</pubDate>
      
      <guid>https://dinwy.github.io/algorithm/2020/Rotating2DArray/</guid>
      <description>Preface It is a interesting question that how to solve this problem. It was really easy to solve this with temp array and copy the value with recursive function. However I was quite confused how to solve in-array When I was solving this problem I was quite confused how to move the element to the array.
My Solution # Recursive solution def rotate(given_array, n): rotated = copy.deepcopy(given_array) for pRow in range(n): for pCol in range(n): rotated[pCol][(n - 1) - pRow] = given_array[pRow][pCol] return given_array  # In-place solution def rotate(given_array, n): for y in range((int)(n / 2)): for x in range(math.</description>
    </item>
    
    <item>
      <title>LeetCode/387. First Unique Character in a String</title>
      <link>https://dinwy.github.io/algorithm/2020/NonRepeatingCharacter/</link>
      <pubDate>Wed, 12 Feb 2020 23:15:22 +0900</pubDate>
      
      <guid>https://dinwy.github.io/algorithm/2020/NonRepeatingCharacter/</guid>
      <description> https://leetcode.com/problems/first-unique-character-in-a-string
Basically this question is asking you about how to you Dictionary. Understanding how to handle key and value and index, can solve this problem easily.
My Solution class Solution(object): def firstUniqChar(self, s): strDict = {} for item in s: if (item in strDict): strDict[item] += 1 else: strDict[item] = 1 for idx, key in enumerate(s): if strDict[key] == 1: return idx return -1  </description>
    </item>
    
  </channel>
</rss>