<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shader on Dinwy&#39;s blog</title>
    <link>https://dinwy.github.io/tags/shader/</link>
    <description>Recent content in Shader on Dinwy&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 17 May 2019 17:59:17 +0900</lastBuildDate>
    
	<atom:link href="https://dinwy.github.io/tags/shader/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Silhouette Material</title>
      <link>https://dinwy.github.io/everyday/2019/silhouetteMaterial/</link>
      <pubDate>Fri, 17 May 2019 17:59:17 +0900</pubDate>
      
      <guid>https://dinwy.github.io/everyday/2019/silhouetteMaterial/</guid>
      <description>  Description Create silhouette material. Which works on android Vulkan API and shader model 5.
Blueprint References  reddit: https://www.reddit.com/r/unrealengine/comments/4gzcdd/custom_depth_pass_how/ UE4 - Tutorial - Render through Walls!: https://youtu.be/timuvlu2ukc  </description>
    </item>
    
    <item>
      <title>SunTempleReverseEngineering</title>
      <link>https://dinwy.github.io/study/2019/sunTempleReverseEngineering/</link>
      <pubDate>Mon, 13 May 2019 15:31:58 +0900</pubDate>
      
      <guid>https://dinwy.github.io/study/2019/sunTempleReverseEngineering/</guid>
      <description>Preface I have seen a good article about reverse engineering UE4 tutorial assets. So I got inspired by that and try to do the same thing.
Source From [Unreal 언리얼]태양의 사원 리버스 엔지니어링: http://blog.naver.com/PostView.nhn?blogId=cccani&amp;amp;logNo=221315412825&amp;amp;from=search&amp;amp;redirect=Log&amp;amp;widgetTypeCall=true&amp;amp;directAccess=false
Summary So I download the SunTemple example project and opened in Unreal. Then I opened SM_Pillar model.
About modeling the top part of pillar, the leaf decoration seems like used same brush. And AO &amp;amp; Normal has been added to low poly model.</description>
    </item>
    
    <item>
      <title>Sphere Mask</title>
      <link>https://dinwy.github.io/everyday/2019/SphereMask/</link>
      <pubDate>Thu, 04 Apr 2019 18:56:23 +0900</pubDate>
      
      <guid>https://dinwy.github.io/everyday/2019/SphereMask/</guid>
      <description>  Description Sphere mask.
Reference  WTF Is? Material - Sphere Mask in Unreal Engine 4: https://youtu.be/xRxkcFOhNrc  </description>
    </item>
    
    <item>
      <title>ProceduralHologram</title>
      <link>https://dinwy.github.io/everyday/2019/ProceduralHologram/</link>
      <pubDate>Tue, 26 Mar 2019 09:58:07 +0900</pubDate>
      
      <guid>https://dinwy.github.io/everyday/2019/ProceduralHologram/</guid>
      <description>  Description Learning about vertex offset manipulation. Shader node from DeepSpaceBanana.  Since I create this for learning purpose, some parts are slightly different from the original.
 Not using panning bar. Using fully UV unwrapped for each quad rather than dividing XY by total amount of quads. Not using sine wave to create burst impact.  Blueprint References  Procedural Hologram Shader: https://deepspacebanana.github.io/deepspacebanana.github.io/blog/shader/art/unreal%20engine/Hologram-Shader-V1  </description>
    </item>
    
    <item>
      <title>SubsurfaceScattering</title>
      <link>https://dinwy.github.io/everyday/2019/SubsurfaceScattering/</link>
      <pubDate>Tue, 26 Mar 2019 09:42:35 +0900</pubDate>
      
      <guid>https://dinwy.github.io/everyday/2019/SubsurfaceScattering/</guid>
      <description>  Description Learn about SSS. Left side is UE4 subsurface shader, right one is custom one which from Madumpa. 3D model of Statue is from https://github.com/keijiro/DanishStatues
Blueprint References  실시간 SSS 셰이더 구현하는 세가지 방법 (2): https://github.com/keijiro/ShaderGraphExamples  </description>
    </item>
    
    <item>
      <title>InvertRGB</title>
      <link>https://dinwy.github.io/everyday/2019/invertRGB/</link>
      <pubDate>Tue, 26 Mar 2019 08:57:04 +0900</pubDate>
      
      <guid>https://dinwy.github.io/everyday/2019/invertRGB/</guid>
      <description>  Description Trying to write more custom shader in UE4.
Blueprint References  유니티 포스트 프로세싱 (후처리) 이펙트 만들기 (1): https://blog.naver.com/mnpshino/221468814028  </description>
    </item>
    
    <item>
      <title>Halftone</title>
      <link>https://dinwy.github.io/everyday/2019/halftone/</link>
      <pubDate>Mon, 18 Mar 2019 16:18:59 +0900</pubDate>
      
      <guid>https://dinwy.github.io/everyday/2019/halftone/</guid>
      <description>  Description Create halftone shader.
Blueprint References  스파이더맨 뉴 유니버스 스타일 셰이더 만들기: https://blog.naver.com/mnpshino/221481588595  </description>
    </item>
    
    <item>
      <title>RimLight</title>
      <link>https://dinwy.github.io/everyday/2019/rimLight/</link>
      <pubDate>Mon, 18 Mar 2019 16:02:30 +0900</pubDate>
      
      <guid>https://dinwy.github.io/everyday/2019/rimLight/</guid>
      <description>  Description Rim light using NDotL.
Blueprint References  유니티와 언리얼에서 NdotL 구현하기: https://blog.naver.com/mnpshino/221441167376 Shader Development from Scratch for Unity with Cg: https://www.udemy.com/unity-shaders/  </description>
    </item>
    
    <item>
      <title>TV</title>
      <link>https://dinwy.github.io/everyday/2019/tv/</link>
      <pubDate>Mon, 18 Mar 2019 15:53:42 +0900</pubDate>
      
      <guid>https://dinwy.github.io/everyday/2019/tv/</guid>
      <description>  Description Recreate Keijiro/TV shader in UE4.
Blueprint References  ShaderGraphExmaple: https://github.com/keijiro/ShaderGraphExamples  </description>
    </item>
    
    <item>
      <title>Hologram</title>
      <link>https://dinwy.github.io/everyday/2019/hologram/</link>
      <pubDate>Mon, 18 Mar 2019 11:03:51 +0900</pubDate>
      
      <guid>https://dinwy.github.io/everyday/2019/hologram/</guid>
      <description>  Description Simple hologram shader.
Blueprint References  UE4 - Tutorial - Hologram Material! (Request!): https://www.youtube.com/watch?v=wIz6iyIOkys  </description>
    </item>
    
    <item>
      <title>Apparition Material</title>
      <link>https://dinwy.github.io/everyday/2019/distanceDissolve/</link>
      <pubDate>Wed, 13 Mar 2019 18:28:32 +0900</pubDate>
      
      <guid>https://dinwy.github.io/everyday/2019/distanceDissolve/</guid>
      <description>  Description Follow apparition material tutorial from DeppSpaceBanana.
Blueprint References  UE4 Apparition Material: https://deepspacebanana.github.io/deepspacebanana.github.io/blog/shader/art/unreal%20engine/UE4-Apparition-Material  </description>
    </item>
    
    <item>
      <title>NeonBoard</title>
      <link>https://dinwy.github.io/everyday/2019/neonBoard/</link>
      <pubDate>Tue, 12 Mar 2019 18:56:51 +0900</pubDate>
      
      <guid>https://dinwy.github.io/everyday/2019/neonBoard/</guid>
      <description>  Description Create neon board. Rendered in UE4
References  Shader Study - Pixel Display (Slime Rancher): https://www.austinobrien.me/blog/shader-study/slime-rancher-pixel-display LCD Display Shader Effect: https://www.alanzucconi.com/2016/05/04/lcd-shader/  </description>
    </item>
    
    <item>
      <title>NeonSign</title>
      <link>https://dinwy.github.io/everyday/2019/neonSign/</link>
      <pubDate>Fri, 08 Mar 2019 18:53:59 +0900</pubDate>
      
      <guid>https://dinwy.github.io/everyday/2019/neonSign/</guid>
      <description>  Description Study neon sign. Rendered in UE4
References  Creating Neon Signs - in Blender: https://youtu.be/7SGf01uSg2E  </description>
    </item>
    
    <item>
      <title>TriplanarMapping</title>
      <link>https://dinwy.github.io/everyday/2019/triplanarMapping/</link>
      <pubDate>Wed, 06 Mar 2019 15:49:26 +0900</pubDate>
      
      <guid>https://dinwy.github.io/everyday/2019/triplanarMapping/</guid>
      <description>  Description Learning Tri-Planar mapping in UE4.
References  Unlocking the Unreal Engine Material Editor: https://www.udemy.com/unlocking-the-unreal-engine-material-editor/  </description>
    </item>
    
    <item>
      <title>BasicMath</title>
      <link>https://dinwy.github.io/study/2019/BasicMath/</link>
      <pubDate>Tue, 26 Feb 2019 15:54:09 +0900</pubDate>
      
      <guid>https://dinwy.github.io/study/2019/BasicMath/</guid>
      <description>Preface Time to understand basic math which often used in OpenGL.
Source From  Vector dot product and vector length: https://www.khanacademy.org/math/linear-algebra/vectors-and-spaces/dot-cross-products/v/vector-dot-product-and-vector-length dot - OpenGL 4 Reference Page: https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/dot.xhtml How to Normalized Vector: https://www.youtube.com/watch?v=7fn03DIW3Ak Vector: https://khanacademy.org/computing/computer-programming/programming-natural-simulations/programming-vectors/a/intro-to-vectors  Summary Nomenclature  Vector: Consist of direction and magnitude. Dot Product: Generate scalar value. Unit Vector: Create unit vector. Vector / Magnitude. u^=∣∣u∣∣ / u-&amp;gt; Scalar Quantity: A quantity which does not depend on direction.</description>
    </item>
    
    <item>
      <title>LocalVolumetricFog</title>
      <link>https://dinwy.github.io/everyday/2019/localVolumetricFog/</link>
      <pubDate>Fri, 22 Feb 2019 17:59:58 +0900</pubDate>
      
      <guid>https://dinwy.github.io/everyday/2019/localVolumetricFog/</guid>
      <description>  Description Local volume metric fog from tutorials.
References  Volumetric Fog and Lighting in Unreal Engine 4 | GDC 2018 | Unreal Engine: https://youtu.be/Xd7-rTzfmCo UE4 Tutorial - Local Volumetric Fog 1&amp;frasl;3 - Basics - Unreal Engine 4: https://www.youtube.com/watch?v=McBiRCSWM9Q  </description>
    </item>
    
    <item>
      <title>SmokeOnSkeletonMesh</title>
      <link>https://dinwy.github.io/everyday/2019/smokeOnSkeletonMesh/</link>
      <pubDate>Thu, 21 Feb 2019 19:00:31 +0900</pubDate>
      
      <guid>https://dinwy.github.io/everyday/2019/smokeOnSkeletonMesh/</guid>
      <description>Description Fake smoke effect on skeleton mesh.</description>
    </item>
    
    <item>
      <title>RayMarching#1</title>
      <link>https://dinwy.github.io/study/2019/rayMarching/</link>
      <pubDate>Tue, 19 Feb 2019 12:12:50 +0900</pubDate>
      
      <guid>https://dinwy.github.io/study/2019/rayMarching/</guid>
      <description>Preface Using OpenGL, practicing ray marching.
Source From  http://iquilezles.org/www/articles/distfunctions/distfunctions.htm http://jamie-wong.com/2016/07/15/ray-marching-signed-distance-functions/ How to Normalize a vector: https://www.youtube.com/watch?v=7fn03DIW3Ak  Summary  ShaderToy controls only a fragment shader  Nomenclature ShaderToy  fragCoord: Current fragment(pixel) position iResolution: The size of the frame. Equal to windows/viewport Signed Distance Functions(SDF): When passed the coordinates of a point in space, return the shortest distance between that point and some surface. Radians: Convert a quantity in degrees to radians.</description>
    </item>
    
    <item>
      <title>FakeVolumetricSmoke</title>
      <link>https://dinwy.github.io/everyday/2019/fakeVolumetricSmoke/</link>
      <pubDate>Mon, 18 Feb 2019 19:33:45 +0900</pubDate>
      
      <guid>https://dinwy.github.io/everyday/2019/fakeVolumetricSmoke/</guid>
      <description>  Description Fake Volumetric smoke
References  Fake Volumetric Smoke Particle System - [UE4]: https://youtu.be/JOMEse32a3I How to spawn Particles on an Actor-Surface (Unreal Engine 4.10): https://youtu.be/-pyTw-45Mfw Technical Artist Bootcamp: The VFX of Diablo; https://www.youtube.com/watch?v=YPy2hytwDLM  </description>
    </item>
    
    <item>
      <title>DissolvingRingVFX</title>
      <link>https://dinwy.github.io/everyday/2019/dissolvingRingVFX/</link>
      <pubDate>Fri, 08 Feb 2019 18:22:54 +0900</pubDate>
      
      <guid>https://dinwy.github.io/everyday/2019/dissolvingRingVFX/</guid>
      <description>  Description Dissolving ring effect, rendered in UE4.
References  Dissolving Ring Particle | Zelda BotW in Unreal: https://www.youtube.com/watch?v=INzG5LrxGyo UE4 Flowing Noise Material tutorial: https://www.youtube.com/watch?v=ut80qnOtNRw  </description>
    </item>
    
    <item>
      <title>StylizedExplosion</title>
      <link>https://dinwy.github.io/everyday/2019/stylizedExplosion/</link>
      <pubDate>Thu, 07 Feb 2019 17:52:43 +0900</pubDate>
      
      <guid>https://dinwy.github.io/everyday/2019/stylizedExplosion/</guid>
      <description>  Description Stylized explosion made in UE4.
References  Blender Tutorial - Anime Style FX Workflow: https://www.youtube.com/watch?v=fE-uDqBpXxI Huge Building Explosion at 2500fps - The Slow Mo Guys: https://www.youtube.com/watch?v=bTUu4ZLtDSs  </description>
    </item>
    
    <item>
      <title>StylizedBombUE4</title>
      <link>https://dinwy.github.io/everyday/2019/stylizedBombUE4/</link>
      <pubDate>Mon, 21 Jan 2019 18:59:41 +0900</pubDate>
      
      <guid>https://dinwy.github.io/everyday/2019/stylizedBombUE4/</guid>
      <description>Description Zelda style stylized bomb effect on UE4. From following tutorial, https://youtu.be/0IrCggoJCno
Small Talk How UE4 cascade works and Unity3D particle system works are different. Need to write down some document for myself.</description>
    </item>
    
    <item>
      <title>DepthMaskUnity</title>
      <link>https://dinwy.github.io/everyday/2019/depthMaskUnity/</link>
      <pubDate>Fri, 18 Jan 2019 14:38:24 +0900</pubDate>
      
      <guid>https://dinwy.github.io/everyday/2019/depthMaskUnity/</guid>
      <description>Description Understand depth mask in Unity3D. https://youtu.be/cHhxs12ZfSQ</description>
    </item>
    
  </channel>
</rss>