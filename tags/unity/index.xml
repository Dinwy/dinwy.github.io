<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unity on Dinwy&#39;s blog</title>
    <link>https://dinwy.github.io/tags/unity/</link>
    <description>Recent content in Unity on Dinwy&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Jul 2019 15:28:20 +0900</lastBuildDate>
    
	<atom:link href="https://dinwy.github.io/tags/unity/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Shader Practice TextureCoordinates Day1PracticeJuly2019</title>
      <link>https://dinwy.github.io/everyday/2019/july/shaderPractice_TextureCoordinates_Day1PracticeJulty2019/</link>
      <pubDate>Mon, 01 Jul 2019 15:28:20 +0900</pubDate>
      
      <guid>https://dinwy.github.io/everyday/2019/july/shaderPractice_TextureCoordinates_Day1PracticeJulty2019/</guid>
      <description>Description Glad I have some time to practice shader at work. Today I&amp;rsquo;ll review very basic part of pixel shader and will create.
TextureCoordinates basic It is a good place to learn about pixel shader in Shadertoy(https://www.shadetoy.com). It simply displays mainImage on the screen. The code below is simply how to draw circle.
float sdCircle( vec2 p, float r ) { return length(p) - r; } void mainImage(out vec4 fragColor, in vec2 fragCoord ) { // Normalized pixel coordinates (from 0 to 1) // The order is important vec2 uv = fragCoord.</description>
    </item>
    
    <item>
      <title>Shooting Star</title>
      <link>https://dinwy.github.io/everyday/2019/shootingStar/</link>
      <pubDate>Tue, 28 May 2019 13:54:56 +0900</pubDate>
      
      <guid>https://dinwy.github.io/everyday/2019/shootingStar/</guid>
      <description>  Description Having fun with Unity3D Particle system. Improve result from the last one.
Tools  Unity3D  References  Etienne POV - 1st place winner RIOT CONTEST 2017 VFX (Stylized): https://www.artstation.com/artwork/by9Nr Animation 101 - Intro to Animation in Unity: https://youtu.be/ts24UWC0mY4  </description>
    </item>
    
    <item>
      <title>StunEffect</title>
      <link>https://dinwy.github.io/everyday/2019/stunEffect/</link>
      <pubDate>Thu, 23 May 2019 19:28:27 +0900</pubDate>
      
      <guid>https://dinwy.github.io/everyday/2019/stunEffect/</guid>
      <description>  Description Having fun with Unity3D Particle system.
Tools  Unity3D  References  Etienne POV - 1st place winner RIOT CONTEST 2017 VFX (Stylized): https://www.artstation.com/artwork/by9Nr  </description>
    </item>
    
    <item>
      <title>Using Task In Unity</title>
      <link>https://dinwy.github.io/study/2019/UsingTaskInUnity/</link>
      <pubDate>Fri, 17 May 2019 18:53:02 +0900</pubDate>
      
      <guid>https://dinwy.github.io/study/2019/UsingTaskInUnity/</guid>
      <description>Preface I was trying make a simple vfx and wondering how to update model without using Monobehaviour Update() function.
If you watch the video carefully model&amp;rsquo;s scale has been changed repeatedly.
Basically by passing cancellationToken we can run a async task and able to stop it.
public void SpawnAndPlay(Transform pos) { GameObject.Instantiate(ParticleEffect, pos); cts = new CancellationTokenSource(); CancellationToken ct = cts.Token; ModelAnimation(pos, ct); } public async void ModelAnimation(Transform pos, CancellationToken ct) { await Task.</description>
    </item>
    
    <item>
      <title>DepthMaskUnity</title>
      <link>https://dinwy.github.io/everyday/2019/depthMaskUnity/</link>
      <pubDate>Fri, 18 Jan 2019 14:38:24 +0900</pubDate>
      
      <guid>https://dinwy.github.io/everyday/2019/depthMaskUnity/</guid>
      <description>Description Understand depth mask in Unity3D. https://youtu.be/cHhxs12ZfSQ</description>
    </item>
    
  </channel>
</rss>